View(Data)
View(Data)
View(Data)
des()
des
fit
adj.pval(fit
)
adj.pval(fit)
adj.pvalue(fit)
adj.P.Val(fit)
results <- classifyTestsF(fit, p.value=0.01)
results
topTable(fit2,p.value=0.01)
topTable(fit,p.value=0.01)
topTable(fit,p.value=0.01, n=100)
topTable(fit,adj.p.value=0.01, n=10)
results <- classifyTests(fit, p.value=0.01)
results <- classifyTestsF(fit, p.value=0.01, adjust="BH")
results <- classifyTestsF(fit, p.value=0.01, adjust="NH")
results <- classifyTestsF(fit, p.value=0.01, adjust="H","N")
topTable(fit,p.value=0.01, adjust="NH")
topTable(fit,p.value=0.01)
topTable(fit, adj.P.Val=0.01)
topTable(fit,p.value=0.01, adjust="BH")
topTable(fit,p.value=0.01, adjust="NH")
topTable(fit,p.value=0.01, adjust="NH", n=5000)
topTable(fit,p.value=0.01, adjust="BH", n=5000)
arefe <- topTable(fit,p.value=0.01, adjust="BH", n=5000)
heatmap(arefe)
pheatmap(Data)
pheatmap?
install.packages(c("peat", "map"))
install.packages("pheatmap")
install.packages("pheatmap")
pheatmap(Data)
pheatmap (Data)
mat(arefe)
fit.values(p.value) = p.adjust(fit.values(p.value), method = p.adjust.methods)
fit type()
type(fit)
class(fit)
nrow(fit)
ncol(fit)
colnames(fit)
results <- classifyTestsF(fit, p.value=0.01)
nrow(results)
ncol(results)
p.adjust(results, method = p.adjust.methods )
results <- p.adjust(results, method = p.adjust.methods )
results <- classifyTestsF(fit, p.value=0.01)
results2 <- p.adjust(results, method = p.adjust.methods )
ncol(results)
nrow(results)
nrow(results2)
results <- p.adjust( fit, method = p.adjust.methods )
fit
$F.p.value
F.p.value
fit.F.p.value
fit
ncol(fit)
dim(fit)
p.Values_rf<-fit$p.value
p.adj_rf = p.adjust(p.Values_rf, method = p.adjust.methods
)
p.adj_rf = p.adjust(p.Values_rf, method = p.adjust.methods)
fit$p.value = p.adj_rf
results_rf <- classifyTestsF(fit, p.value=0.01)
ncol(results_rf)
nrow(results_rf)
fit$p.value <- p.adj_rf
results_rf <- classifyTestsF(fit, p.value=0.01)
nrow(results_rf)
nrow(Data)
results_rf_better <- classifyTestsF(fit, p.value=0.01)
results_rf_better <- classifyTestsF(fit, p.value=0.0001)
nrow(results_rf)
results_rf_better <- classifyTestsF(fit, p.value=0.00000000000000000000000000000000000000000001)
nrow(results_rf)
results_rf_better <- classifyTestsF(fit, p.value=0.0000000000000000000000000000000000000000000000000000000000000000000001)
nrow(results_rf)
ncol(results_rf)
results_rf_better <- classifyTestsF(fit, p.value=0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
nrow(results_rf)
results_rf_better <- classifyTestsF(fit, p.value=0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)
nrow(results_rf)
results_rf_better <- classifyTestsP(fit, p.value=0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)
nrow(results_rf)
results_rf_better2 <- classifyTestsP(fit, df=Inf, p.value=0.05, method="holm")
results_rf_better <- classifyTestsF(fit, p.value=0.01)
results_rf_better
fit
fit <- lmFit(Data, des) ## !
p.adj_rf <- fit$p.value
p.adj_rf <- p.adjust(p.Values_rf, method = p.adjust.methods)
fit$p.value <- p.adj_rf
fit <- lmFit(Data, des) ## !
p.adj_rf <- fit$p.value
p.adj_rf <- p.adjust(p.Values_rf, method = p.adjust.methods)
fit$p.value <- p.adj_rf
fit <- lmFit(Data, des) ## !
p.adj_rf <- fit$p.value
p.adj_rf <- p.adjust(p.Values_rf, method = p.adjust.methods)
fit$p.value <- p.adj_rf
results <- classifyTestsF(fit, p.value=0.01)
fit <- lmFit(Data, des) ## !
classifyTestsF(fit, p.value=0.01)
type <- c(rep("N",8),rep("H",8))
des <- model.matrix(~ type+0)
Data <- log(exprs(gset[[1]])+0.001)
fit <- lmFit(Data, des) ## !
numb_gen
library(limma)
library(GEOquery)
type <- c(rep("N",8),rep("H",8))
des <- model.matrix(~ type+0)
Data <- log(exprs(gset[[1]])+0.001)
fit <- lmFit(Data, des)
fit <- eBayes(fit)
# ADJUSTING P-VALUE
pVal_ad<-p.adjust(fit$p.value, method = p.adjust.methods)
pVal_ad <- as.array(pVal_ad)
colnam <- colnames(fit$p.value)
fit$p.value<- matrix( pVal_ad, nrow = nrow(fit$p.value), ncol=2)
colnames(fit$p.value) <- colnam
# classifyTests
results1 <- classifyTestsP(fit, p.value=0.01)
results2 <- classifyTestsF(fit, p.value=0.01)
results3 <- decideTests(fit, p.value=1e-17)
results4 <- decideTests(fit, p.value=0.01)
#top 5 de gens
top5DEgens <- topTable(fit, number=5, fit$p.value < 0.01, adjust.method ="holm")
#heatmap plot, save to "heatmap.png"
pheatmap::pheatmap(top5DEgens, filename = "heatmap.png")
# save de gens with adjusted p.value<0.01 to "de.csv"
numb_gen <- nrow(Data)
gen_names <- row.names(Data)
colnam_re <- c("H", "N")
colnames(results4) <- colnam_re
DE <- cbind(gen_names, fit$p.value, results4)
DE <- data.frame(DE)
DE <- subset(DE, N == 1 & H==1, select = c(2,3))
write.csv(DE, file = "de.csv")
numb_gen
DE <- data.frame(DE)
DE <- subset(DE, H==1, select = c(2))
DEN <- subset(DE, N == 0 & H==1, select = c(2))
write.csv(DE, file = "de.csv")
top5DEgens <- topTable(fit, number=5, fit$p.value < 0.01, adjust.method ="holm")
#heatmap plot, save to "heatmap.png"
pheatmap::pheatmap(top5DEgens, filename = "heatmap.png")
# save de gens with adjusted p.value<0.01 to "de.csv"
numb_gen <- nrow(Data)
gen_names <- row.names(Data)
colnam_re <- c("H", "N")
colnames(results4) <- colnam_re
DE <- cbind(gen_names, fit$p.value, results4)
DE <- data.frame(DE)
DE <- subset(DE, H==1, select = c(2))
DEN <- subset(DE, N == 0 & H==1, select = c(2))
write.csv(DE, file = "de.csv")
DEN <- subset(DE, N == 0 & H==1)
DEN <- subset(DE, N == 0 & H==1)
DEN <- subset(DE,  select = c(2))
DE <- subset(DE, H==1, select = c(2))
DE <- data.frame(DE)
DEN <- subset(DE, N == 0 & H==1)
DE <- data.frame(DE)
DE <- subset(DE, N == 1 & H==1, select = c(2,3))
write.csv(DE, file = "de.csv")
type <- c(rep("N",8),rep("H",8))
des <- model.matrix(~ type+0)
Data <- log(exprs(gset[[1]])+0.001)
fit <- lmFit(Data, des)
fit <- eBayes(fit)
# ADJUSTING P-VALUE
pVal_ad<-p.adjust(fit$p.value, method = p.adjust.methods)
pVal_ad <- as.array(pVal_ad)
colnam <- colnames(fit$p.value)
fit$p.value<- matrix( pVal_ad, nrow = nrow(fit$p.value), ncol=2)
colnames(fit$p.value) <- colnam
# classifyTests
results1 <- classifyTestsP(fit, p.value=0.01)
results2 <- classifyTestsF(fit, p.value=0.01)
results3 <- decideTests(fit, p.value=1e-17)
results4 <- decideTests(fit, p.value=0.01)
#top 5 de gens
top5DEgens <- topTable(fit, number=5, fit$p.value < 0.01, adjust.method ="holm")
#heatmap plot, save to "heatmap.png"
pheatmap::pheatmap(top5DEgens, filename = "heatmap.png")
# save de gens with adjusted p.value<0.01 to "de.csv"
numb_gen <- nrow(Data)
gen_names <- row.names(Data)
colnam_re <- c("H", "N")
colnames(results4) <- colnam_re
DE <- cbind(gen_names, fit$p.value, results4)
DE <- data.frame(DE)
DE <- subset(DE, N == 1 & H==1, select = c(2,3))
write.csv(DE, file = "de.csv")
DE <- cbind(gen_names, fit$p.value, results4)
DE <- data.frame(DE)
DEH <- subset(DE, N == 1 & H==1, select = c(2,3))
DEN <- subset(DE, N == 0 & H==1, select = c(2,3))
write.csv(DEH, file = "de.csv")
write.csv(DEH, file = "de_N.csv")
# 8 samples of hepatocellular carcinoma in each appropriate together.
type <- c(rep("N",8),rep("H",8))
# defining the design matrix for fitting linear model
des <- model.matrix(~ type+0)
# Put expresions of gens in log scale
Data <- log(exprs(gset[[1]])+0.001)
# Fitting linear model
fit <- lmFit(Data, des)
# setup bayes on fitted model to moderate the standard errors
fit <- eBayes(fit)
# ADJUSTING P-VALUE
pVal_ad<-p.adjust(fit$p.value, method = p.adjust.methods)
pVal_ad <- as.array(pVal_ad)
colnam <- colnames(fit$p.value)
fit$p.value<- matrix( pVal_ad, nrow = nrow(fit$p.value), ncol=2)
colnames(fit$p.value) <- colnam
# classifyTests on adjusted p-value thereshold
results3 <- decideTests(fit, p.value=1e-17)
results4 <- decideTests(fit, p.value=0.01)
#top 5 de gens
top5DEgens <- topTable(fit, number=5, fit$p.value < 0.01, adjust.method ="BH")
#heatmap plot, save to "heatmap.png"
pheatmap::pheatmap(top5DEgens, filename = "heatmap.png")
# save de gens with adjusted p.value<0.01 to "de.csv"
gen_names <- row.names(Data)
colnam_re <- c("H", "N")
colnames(results4) <- colnam_re
DE <- cbind(gen_names, fit$p.value, results4)
DE <- data.frame(DE)
DEH <- subset(DE, N == 1 & H==1, select = c(2))
DEN <- subset(DE, N == 0 & H==1, select = c(2))
write.csv(DEH, file = "de.csv")
write.csv(DEH, file = "de_N.csv")
setwd("~/Desktop/R Test-Arefeh Yavari")
#put 8 control samples from non-neoplastic liver tissue and
# 8 samples of hepatocellular carcinoma in each appropriate together.
type <- c(rep("N",8),rep("H",8))
# defining the design matrix for fitting linear model
des <- model.matrix(~ type+0)
# Put expresions of gens in log scale
Data <- log(exprs(gset[[1]])+0.001)
# Fitting linear model
fit <- lmFit(Data, des)
# setup bayes on fitted model to moderate the standard errors
fit <- eBayes(fit)
# ADJUSTING P-VALUE
pVal_ad<-p.adjust(fit$p.value, method = p.adjust.methods)
pVal_ad <- as.array(pVal_ad)
colnam <- colnames(fit$p.value)
fit$p.value<- matrix( pVal_ad, nrow = nrow(fit$p.value), ncol=2)
colnames(fit$p.value) <- colnam
# classifyTests on adjusted p-value thereshold
results3 <- decideTests(fit, p.value=1e-17)
results4 <- decideTests(fit, p.value=0.01)
#top 5 de gens
top5DEgens <- topTable(fit, number=5, fit$p.value < 0.01, adjust.method ="BH")
#heatmap plot, save to "heatmap.png"
pheatmap::pheatmap(top5DEgens, filename = "heatmap.png")
# save de gens with adjusted p.value<0.01 to "de.csv"
gen_names <- row.names(Data)
colnam_re <- c("H", "N")
colnames(results4) <- colnam_re
DE <- cbind(gen_names, fit$p.value, results4)
DE <- data.frame(DE)
DEH <- subset(DE, N == 1 & H==1, select = c(2))
DEN <- subset(DE, N == 0 & H==1, select = c(2))
write.csv(DEH, file = "de.csv")
write.csv(DEH, file = "de_N.csv")
DEN <- subset(DE, N == 0 & H==1, select = c(2))
write.csv(DEH, file = "de.csv")
write.csv(DEH, file = "de_N.csv")
# 8 samples of hepatocellular carcinoma in each appropriate together.
type <- c(rep("N",8),rep("H",8))
# defining the design matrix for fitting linear model
des <- model.matrix(~ type+0)
# Put expresions of gens in log scale
Data <- log(exprs(gset[[1]])+0.001)
# Fitting linear model
fit <- lmFit(Data, des)
# setup bayes on fitted model to moderate the standard errors
fit <- eBayes(fit)
# ADJUSTING P-VALUE
pVal_ad<-p.adjust(fit$p.value, method = p.adjust.methods)
pVal_ad <- as.array(pVal_ad)
colnam <- colnames(fit$p.value)
fit$p.value<- matrix( pVal_ad, nrow = nrow(fit$p.value), ncol=2)
colnames(fit$p.value) <- colnam
# classifyTests on adjusted p-value thereshold
results3 <- decideTests(fit, p.value=1e-17)
results4 <- decideTests(fit, p.value=0.01)
#top 5 de gens
top5DEgens <- topTable(fit, number=5, fit$p.value < 0.01, adjust.method ="BH")
#heatmap plot, save to "heatmap.png"
pheatmap::pheatmap(top5DEgens, filename = "heatmap.png")
# save de gens with adjusted p.value<0.01 to "de.csv"
gen_names <- row.names(Data)
colnam_re <- c("H", "N")
colnames(results4) <- colnam_re
DE <- cbind(gen_names, fit$p.value, results4)
DE <- data.frame(DE)
DE <- subset(DE, N == 1 & H==1, select = c(2))
write.csv(DE, file = "de.csv")
#put 8 control samples from non-neoplastic liver tissue and
# 8 samples of hepatocellular carcinoma in each appropriate together.
type <- c(rep("N",8),rep("H",8))
# defining the design matrix for fitting linear model
des <- model.matrix(~ type+0)
# Put expresions of gens in log scale
Data <- log(exprs(gset[[1]])+0.001)
# Fitting linear model
fit <- lmFit(Data, des)
# setup bayes on fitted model to moderate the standard errors
fit <- eBayes(fit)
# ADJUSTING P-VALUE
pVal_ad<-p.adjust(fit$p.value, method = p.adjust.methods)
pVal_ad <- as.array(pVal_ad)
colnam <- colnames(fit$p.value)
fit$p.value<- matrix( pVal_ad, nrow = nrow(fit$p.value), ncol=2)
colnames(fit$p.value) <- colnam
# classifyTests on adjusted p-value thereshold
results3 <- decideTests(fit, p.value=1e-17)
results4 <- decideTests(fit, p.value=0.01)
#top 5 de gens
top5DEgens <- topTable(fit, number=5, fit$p.value < 0.01, adjust.method ="BH")
#heatmap plot, save to "heatmap.png"
pheatmap::pheatmap(top5DEgens, filename = "heatmap.png")
# save de gens with adjusted p.value<0.01 to "de.csv"
gen_names <- row.names(Data)
colnam_re <- c("H", "N")
colnames(results4) <- colnam_re
DE <- cbind(gen_names, fit$p.value, results4)
DE <- data.frame(DE)
DE <- subset(DE, N == 1 & H==1, select = c(2,3))
write.csv(DE, file = "de.csv")
type <- c(rep("N",8),rep("H",8))
# defining the design matrix for fitting linear model
des <- model.matrix(~ type+0)
# Put expresions of gens in log scale
Data <- log(exprs(gset[[1]])+0.001)
# Fitting linear model
fit <- lmFit(Data, des)
# setup bayes on fitted model to moderate the standard errors
fit <- eBayes(fit)
# ADJUSTING P-VALUE
pVal_ad<-p.adjust(fit$p.value, method = p.adjust.methods)
pVal_ad <- as.array(pVal_ad)
colnam <- colnames(fit$p.value)
fit$p.value<- matrix( pVal_ad, nrow = nrow(fit$p.value), ncol=2)
colnames(fit$p.value) <- colnam
# classifyTests for adjusted p-value thereshold
results3 <- decideTests(fit, p.value=1e-17)
results4 <- decideTests(fit, p.value=0.01)
#top 5 de gens
top5DEgens <- topTable(fit, number=5, fit$p.value < 0.01, adjust.method ="BH")
#heatmap plot, save to "heatmap.png"
pheatmap::pheatmap(top5DEgens, filename = "heatmap.png")
# save de gens with adjusted p.value<0.01 to "de.csv"
gen_names <- row.names(Data)
colnam_re <- c("H", "N")
colnames(results4) <- colnam_re
DE <- cbind(gen_names, fit$p.value, results4)
DE <- data.frame(DE)
DE <- subset(DE, N == 1 & H==1, select = c(2,3))
write.csv(DE, file = "de.csv")
